substitutions:

  ############################################################################
  # configuration substitutions.  redefine these in your local yaml file to
  # change behavior.  You should add these substitutions in your main yaml
  # under name and friendly_name.  This file does not need to be downloaded
  # and edited.

  # defines whether current color will be saved to the config light entities.
  save_on_state:  'true'   # default is to save selected color as on color of switch
  save_off_state: 'false'  # but don't save off state

  stay_switched: 'false'   # if true, will keep relay as switched

  # sub_hold_time is hold time to first change, change_delay is hold time between subsequent changes.
  # initial_delay: 750ms   # initial_delay substitution is replaced by sub_hold_time in kauf-rgbs.yaml
  change_delay:  750ms

  # colors to rotate through, needs to be 3 comma-separated int values between 0-255 (r,g,b)
  color_0:  '255,   0,   0' # red
  color_1:  '255, 127,   0'
  color_2:  '255, 255,   0' # yellow
  color_3:  '127, 255,   0'
  color_4:  '  0, 255,   0' # green
  color_5:  '  0, 255, 127'
  color_6:  '  0, 255, 255' # cyan
  color_7:  '  0, 127, 255'
  color_8:  '  0,   0, 255' # blue
  color_9:  '127,   0, 255'
  color_10: '255,   0, 255' # magenta
  color_11: '255,   0, 127'

  # control a home assistant light entity
  hass_light_entity:              no.ne

  # default brightness values for just turning light on.
  # brightness needs to be int 0-255.
  # brightness_pct needs to be 0-100.
  # default if none of these are overwritten is to turn on light without specifying a brightness
  #
  # set either:
  #  (a) one "entity" value to adopt brightness/pct from a home assistant entity.
  #  (b) one "entity" value and its paired "attribute" value to adopt brightness/pct from a home assistant entity attribute.
  #  (c) one "fixed" value to adopt a fixed brightness every time the light turns on.
  #  (d) DEFAULT: keep all values as "none" to not send a brightness with the turn_on command, keeping previous brightness.
  hass_brightness_entity:        none
  hass_brightness_attribute:     none
  hass_brightness_fixed:         none
  hass_brightness_pct_entity:    none
  hass_brightness_pct_attribute: none
  hass_brightness_pct_fixed:     none

  # default color or color temp values for just turning light on
  #
  # set either:
  #  (a) one "entity" value to adopt color/temp from a home assistant entity.
  #  (b) one "entity" value and its paired "attribute" value to adopt color/temp from a home assistant entity attribute.
  #  (c) one "fixed" value to always turn on light to a fixed color/temp
  #  (d) keep all values as set below to always turn light on to a fixed 250 mireds.
  #  (e) set the mireds_fixed value to "none" to keep the light's last set color
  #
  # In any case, these will be arguments to home assistant's light.turn_on service, so the values need to comply with
  # the requirements of those arguments (either rgb_color, color_temp, or kelvin).
  # https://www.home-assistant.io/integrations/light/#service-lightturn_on
  hass_rgb_entity:               none
  hass_rgb_attribute:            none
  hass_rgb_fixed:                none
  hass_ct_kelvin_entity:         none
  hass_ct_kelvin_attribute:      none
  hass_ct_kelvin_fixed:          none
  hass_ct_mireds_entity:         none
  hass_ct_mireds_attribute:      none
  hass_ct_mireds_fixed:          '250'

  ############################################################################
  # substitutions to implement functionality, do not change these
  sub_on_hold:      script_on_hold
  sub_on_release:   script_on_release
  sub_toggle_check: script_dont_toggle
  sub_on_turn_on:   switch_to_light_on
  sub_on_turn_off:  switch_to_light_off


globals:
  - id: current_color
    type: int
    restore_value: yes
    initial_value: '999'


esphome:
  on_boot:
    then:
      - select.set:
          id: select_button
          option: "Toggle on Release"
      - if:
          condition:
            lambda: return (!$stay_switched && (id(select_relay).state == "Switched") );
          then:
            - select.set:
                id: select_relay
                option: "Always On"


text_sensor:
  - platform: homeassistant
    id: hass_light_state
    entity_id: $hass_light_entity
    on_value:
      - delay: 1ms
      - if:
          condition:
            lambda: return ( ((x == "on") && !id(ui_switch).state) || ((x == "off") && id(ui_switch).state) );
          then:
            - switch.toggle: ui_switch


script:

  - id: script_on_hold
    then:
      - lambda: |-
          // call script_dont_toggle, keeping light from toggling when button is released
          // if we are doing the color cycling thing.
          id(script_dont_toggle).execute();

          // if switch (and thus light) is on and hass_light_entity substitution is set
          // then call copy_val_to_light first, which will then call script_change_color
          // otherwise, just go straight to script_change_color
          if ( id(ui_switch).state && (strcmp("$hass_light_entity","no.ne") != 0) ) {
            id(copy_val_to_light).execute();
          } else {
            id(script_change_color).execute();
          }

  - id: script_on_release
    then:
      - script.stop: copy_val_to_light
      - script.stop: script_change_color

  - id: script_change_color
    mode: restart
    then:
      - lambda: |-
          id(current_color)++;
          if ( id(current_color) > 11) id(current_color) = 0;
          if ( id(current_color) < 0 ) id(current_color) = 11;

          auto call = id(big_light).turn_on();

          // use config light instead if enabled
          if ( $save_on_state &&  id(ui_switch).state) call = id(big_light_on).turn_on();
          if ( $save_off_state && !id(ui_switch).state) call = id(big_light_off).turn_on();

          int red, green, blue;

          // grab color ints based on currently selected color
          if ( id(current_color) == 0 ) {
            int used_colors[3] = {$color_0};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 1 ) {
            int used_colors[3] = {$color_1};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 2 ) {
            int used_colors[3] = {$color_2};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 3 ) {
            int used_colors[3] = {$color_3};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 4 ) {
            int used_colors[3] = {$color_4};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 5 ) {
            int used_colors[3] = {$color_5};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 6 ) {
            int used_colors[3] = {$color_6};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 7 ) {
            int used_colors[3] = {$color_7};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 8 ) {
            int used_colors[3] = {$color_8};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 9 ) {
            int used_colors[3] = {$color_9};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else if ( id(current_color) == 10 ) {
            int used_colors[3] = {$color_10};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }
          else {
            int used_colors[3] = {$color_11};
            red = used_colors[0];
            green = used_colors[1];
            blue = used_colors[2];
          }

          // set call rgb value by converting to floats
          call.set_rgb( (float) red/255.0f , (float) green/255.0f , (float) blue/255.0f );
          call.set_transition_length(0);
          call.perform();

          // call home assistant service if set and switch is on
          if ( (strcmp("$hass_light_entity","no.ne") != 0) && id(ui_switch).state ) {
            auto *api_server = esphome::api::global_api_server;
            if (api_server != nullptr) {
              esphome::api::HomeAssistantServiceCallAction<> call(api_server, false);
              call.set_service("light.turn_on");
              call.add_data("entity_id", "$hass_light_entity");
              call.add_data("transition", "0");
              call.add_data_template("rgb_color", "[" + esphome::to_string(red) + "," + esphome::to_string(green) + "," + esphome::to_string(blue) + "]");
              call.play();
            }
          }

        # delay and run again forever.  Stopped by on_release script.
      - delay: $change_delay
      - script.execute: script_change_color

  - id: copy_val_to_light
    then:
      - lambda: |-
          // dont do anything if entity not set
          if (strcmp("$hass_light_entity","no.ne") == 0 ) { return; }

          // if light is on, take color from big light current state
          if ( id(ui_switch).state  ) {

            int red   = id(big_light)->current_values.get_red()   * 255;
            int green = id(big_light)->current_values.get_green() * 255;
            int blue  = id(big_light)->current_values.get_blue()  * 255;


            auto *api_server = esphome::api::global_api_server;
            if (api_server != nullptr) {
              esphome::api::HomeAssistantServiceCallAction<> call(api_server, false);
              call.set_service("light.turn_on");
              call.add_data("entity_id", "$hass_light_entity");
              call.add_data("transition", "0");
              call.add_data_template("rgb_color", "[" + to_string(red) + "," + to_string(green) + "," + to_string(blue) + "]");
              call.play();
            }
          }

        # delay and then run normal script
      - delay: $change_delay
      - script.execute: script_change_color

  - id: switch_to_light_off
    then:
      - lambda: |-
          // exit if light entity not set
          if (strcmp("$hass_light_entity","no.ne") != 0) {

            auto *api_server = esphome::api::global_api_server;
            if (api_server != nullptr) {
              esphome::api::HomeAssistantServiceCallAction<> call(api_server, false);
              call.set_service("light.turn_off");
              call.add_data("entity_id", "$hass_light_entity");
              call.play();
            }

          }

  - id: switch_to_light_on
    then:
      - lambda: |-
          // exit if light entity not set
          if (strcmp("$hass_light_entity","no.ne") != 0) {

            auto *api_server = esphome::api::global_api_server;
            if (api_server != nullptr) {

              esphome::api::HomeAssistantServiceCallAction<> call(api_server, false);
              call.set_service("light.turn_on");
              call.add_data("entity_id", "$hass_light_entity");

              ///////////////////////////////////////////////////////////////////////////////////////////////////////////
              // add brightness if set

              // brightness entity set, attribute not set
              if ( (strcmp("$hass_brightness_entity","none")!=0) && (strcmp("$hass_brightness_attribute","none")==0) ) {
                call.add_data_template("brightness", "{{ states(\"$hass_brightness_entity\") }}");
              }

              // brightness entity and attribute both set
              else if ( (strcmp("$hass_brightness_entity","none")!=0) && (strcmp("$hass_brightness_attribute","none")!=0) ) {
                call.add_data_template("brightness", "{{ state_attr(\"$hass_brightness_entity\",\"$hass_brightness_attribute\") }}");
              }

              // fixed brightness set
              else if ( strcmp("$hass_brightness_fixed","none")!=0 ) {
                call.add_data("brightness", "$hass_brightness_fixed");
              }

              // brightness_pct entity set, attribute not set
              else if ( (strcmp("$hass_brightness_pct_entity","none")!=0) && (strcmp("$hass_brightness_pct_attribute","none")==0) ) {
                call.add_data_template("brightness_pct", "{{ states(\"$hass_brightness_pct_entity\") }}");
              }

              // brightness_pct entity and attribute both set
              else if ( (strcmp("$hass_brightness_pct_entity","none")!=0) && (strcmp("$hass_brightness_pct_attribute","none")!=0) ) {
                call.add_data_template("brightness_pct", "{{ state_attr(\"$hass_brightness_pct_entity\",\"$hass_brightness_pct_attribute\") }}");
              }

              // fixed brightness_pct set
              else if ( strcmp("$hass_brightness_pct_fixed","none")!=0 ) {
                call.add_data("brightness_pct", "$hass_brightness_pct_fixed");
              }


              ///////////////////////////////////////////////////////////////////////////////////////////////////////////
              // add color/temp if set

              // fixed kelvin set
              if ( strcmp("$hass_ct_kelvin_fixed","none") != 0 ) {
                call.add_data("kelvin", "$hass_ct_kelvin_fixed");
              }

              // mireds entity set, attribute not set
              else if ( (strcmp("$hass_ct_kelvin_entity","none")!=0) && (strcmp("$hass_ct_kelvin_attribute","none")==0) ) {
                call.add_data_template("kelvin", "{{ states(\"$hass_ct_kelvin_entity\") }}");
              }

              // mireds entity and attribute both set
              else if ( (strcmp("$hass_ct_kelvin_entity","none")!=0) && (strcmp("$hass_ct_kelvin_attribute","none")!=0) ) {
                call.add_data_template("kelvin", "{{ state_attr(\"$hass_ct_kelvin_entity\",\"$hass_ct_kelvin_attribute\") }}");
              }

              // fixed rgb set
              else if ( strcmp("$hass_rgb_fixed","none")!=0 ) {
                call.add_data_template("rgb_color", "$hass_rgb_fixed");
              }

              // rgb entity set, attribute not set
              else if ( (strcmp("$hass_rgb_entity","none")!=0) && (strcmp("$hass_rgb_attribute","none")==0) ) {
                call.add_data_template("rgb_color", "{{ states(\"$hass_rgb_entity\") }}");
              }

              // rgb entity and attribute both set
              else if ( (strcmp("$hass_rgb_entity","none")!=0) && (strcmp("$hass_rgb_attribute","none")!=0) ) {
                call.add_data_template("rgb_color", "{{ state_attr(\"$hass_rgb_entity\",\"$hass_rgb_attribute\") }}");
              }

              // mireds entity set, attribute not set
              else if ( (strcmp("$hass_ct_mireds_entity","none")!=0) && (strcmp("$hass_ct_mireds_attribute","none")==0) ) {
                call.add_data_template("color_temp", "{{ states(\"$hass_ct_mireds_entity\") }}");
              }

              // mireds entity and attribute both set
              else if ( (strcmp("$hass_ct_mireds_entity","none")!=0) && (strcmp("$hass_ct_mireds_attribute","none")!=0) ) {
                call.add_data_template("color_temp", "{{ state_attr(\"$hass_ct_mireds_entity\",\"$hass_ct_mireds_attribute\") }}");
              }

              // fixed mireds set (last since set by default, that way any other option set will override)
              else if ( strcmp("$hass_ct_mireds_fixed","none")!=0 ) {
                call.add_data("color_temp", "$hass_ct_mireds_fixed");
              }

              call.play();
            }
          }

    # once button is held for initial delay, don't toggle until button is released again.
  - id: script_dont_toggle
    then:
      - wait_until:
          binary_sensor.is_off: main_button
      - delay: 25ms
