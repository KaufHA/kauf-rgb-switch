# https://esphome.io/guides/configuration-types.html#substitutions
substitutions:

  # substitutions can be changed here if you are using this file directly in the ESPHome dashboard.  The better approach is
  # to incorporate this file as a package using the following packages: configuration, and then overwrite these substitutions
  # in your local yaml file by redefining them.
  #
  # packages:
  #   kauf.rgbsw: github://KaufHA/kauf-rgb-switch/kauf-rgbs.yaml
  #

  name: kauf-rgbsw             # **** CHANGE DEVICE NAME TO SOMETHING UNIQUE PER DEVICE.  RENAME YAML FILE TO SAME NAME.    ****
                               # **** USE DASHES (-) INSTEAD OF SPACES OR UNDERSCORE (_).  USE ONLY LOWER CASE LETTERS.     ****
  friendly_name: Kauf RGB Sw   # **** CHANGE FRIENDLY NAME TO SOMETHING UNIQUE PER DEVICE                                   ****

  # https://esphome.io/components/esphome.html#esphome-creators-project
  project_name: Kauf.RGBSw
  project_ver_num: "1.3792"
  project_ver_let: y

  sub_4m: "false"
  sub_import_url: github://KaufHA/kauf-rgb-switch/kauf-rgbs.yaml

  disable_entities: "true"     # set to "false" to have all entities show up in Home Assistant automatically
  disable_webserver: "false"   # set to "true" to disable webserver listening on port 80.

  wifi_ap_timeout: 2min        # default to 2 minute timeout for yaml file as package.

  # substitutions for scripts to execute based on button actions.
  # the built-in automations for the button will still do everything they normally do even
  # when these substitutions are redefined.  Redefining these will not stop the ui switch from toggling.
  # The button configuration select entity must be set to disabled to stop the button from toggling the ui switch.
  # The button press duration sensor will also still update even with these redefined.
  sub_on_press:                script_do_nothing # executes right when button is pressed
  sub_on_release:              script_do_nothing # executes right when button is released
  sub_on_double_press:         script_do_nothing # executes when the button is double pressed
  sub_on_single_press:         script_do_nothing # executes when the button is single pressed only, not held or double pressed
  sub_on_hold:                 script_do_nothing # executes when the button is held for a threshold amount of time
  sub_on_release_without_hold: script_do_nothing # executes when the button is released after a press that is under the hold threshold.
  sub_wifi_reset_script:       script_wifi_reset # reset wifi credentials, overwrite to disable

  # an extra script that, if running, will stop the switch from toggling on button release.
  sub_toggle_check: script_do_nothing

  # these will execute when ui_switch turns on and off, respectively.  like on_press and on_release above, built-in
  # automations still all run.  Lights changing can be disabled through the config light entity effects.  Relay
  # can be disabled by selecting always on or always off in the configuration select entity.  You can control the
  # relay independently by toggling the select entity between always on and always off.
  sub_on_turn_on:  script_do_nothing
  sub_on_turn_off: script_do_nothing

  # allows status led to be blocked.  Currently only used on factory image to eliminate blinking during factory test.
  sub_blink_check: script_do_nothing

  # modify transition length of lights
  sub_transition_length: 333ms

  # button press substitutions
  sub_double_press_max_gap: 333ms
  sub_hold_time: 750ms
  sub_button_sensor_duration: 500ms

  # substitutions to control hass entities with press combos
  hass_entity_single_press_toggle:           no.ne
  hass_entity_double_press_toggle:           no.ne
  hass_entity_hold_toggle:                   no.ne
  hass_entity_release_without_hold_toggle:   no.ne

  # substitutions to sync lights with hass entities instead of UI switch
  hass_entity_control_small_light:           no.ne
  hass_entity_control_small_light_on_state:  'on'
  hass_entity_control_small_light_off_state: 'off'
  hass_entity_control_big_light:             no.ne
  hass_entity_control_big_light_on_state:    'on'
  hass_entity_control_big_light_off_state:   'off'


# https://esphome.io/components/esp8266.html
esp8266:
  board: esp01_1m
  restore_from_flash: true
  early_pin_init: false
  start_free: 108
  global_addr: global_forced_addr


# https://esphome.io/guides/automations.html#global-variables
globals:
  - id: global_forced_addr
    type: int
    restore_value: no
    initial_value: '12345'
  - id: global_press_time
    type: int
    restore_value: no
    initial_value: '0'


# https://esphome.io/components/esphome.html
esphome:
  name: $name
  friendly_name: $friendly_name
  project:
    name: $project_name
    version: $project_ver_num($project_ver_let)
  on_boot:
    then:
        # set default values for template sensors, otherwise they are unknown.
      - binary_sensor.template.publish:
          id: button_single_press
          state: OFF
      - binary_sensor.template.publish:
          id: button_double_press
          state: OFF
      - binary_sensor.template.publish:
          id: button_hold
          state: OFF
      - binary_sensor.template.publish:
          id: button_release_without_hold
          state: OFF
      - binary_sensor.template.publish:
          id: sensor_4m
          state: $sub_4m

  min_version: 2025.8.4


# https://esphome.io/components/external_components.html
external_components:
  - source:
      type: git
      url: https://github.com/KaufHA/common
      ref: v2025.09.10
    refresh: never


# https://esphome.io/components/wifi.html
wifi:

  # **** ENTER WI-FI CREDENTIALS HERE, USING SECRETS.YAML RECOMMENDED ****
  ssid: initial_ap            # !secret wifi_ssid
  password: asdfasdfasdfasdf  # !secret wifi_password

  # default is 20, 17 is recommended.
  output_power: 17

  forced_addr: 82
  global_addr: global_forced_addr

  ap:
    ap_timeout: $wifi_ap_timeout


# https://esphome.io/components/captive_portal.html
captive_portal:


# https://esphome.io/components/logger.html
logger:


# https://esphome.io/components/api.html
api:
  id: kauf_api


# https://esphome.io/components/ota.html
ota:
  - platform: web_server
    on_error:
      - button.press: restart_button
  - platform: esphome
    on_error:
      - button.press: restart_button


safe_mode:


# https://esphome.io/components/web_server.html
web_server:
  disable: $disable_webserver
  sensor_4m: $sub_4m
  js_url: https://kaufha.com/v2/www.js


# https://esphome.io/components/binary_sensor/index.html
binary_sensor:

    # https://esphome.io/components/binary_sensor/gpio.html
  - platform: gpio
    id: main_button
    name: Button
    pin:
      number: GPIO13
      mode:
        input: true
        pullup: true
      inverted: true

    on_press:
        then:
            # store press time in ms
          - lambda: |-
              // store time of press and clear duration sensor
              id(global_press_time) = millis();
              id(sensor_press_duration).publish_state(0);

              // toggle if button is configured to toggle on press
              if (id(select_button).state == "Toggle on Press") {
                id(ui_switch).toggle(); }
          - script.execute: $sub_on_press

    on_release:
        then:
          - lambda: |-
              // set press duration sensor
              id(sensor_press_duration).publish_state(millis() - id(global_press_time));

              // toggle if configured to toggle on release and toggle check script is no longer running
              if (  (id(select_button).state == "Toggle on Release") && !id($sub_toggle_check).is_running() ) {
                id(ui_switch).toggle(); }

          - script.execute: $sub_on_release

    on_multi_click:

      # definition for single press
    - timing:
        - ON for at most $sub_hold_time
        - OFF for at least $sub_double_press_max_gap
      invalid_cooldown: 1500ms
      then:
        - lambda: |-
            id(button_single_press).publish_state(true);
            // toggle if button is configured to toggle on single press
            if (id(select_button).state == "Toggle on Single Press") {
              id(ui_switch).toggle(); }
            id(script_hass_toggle_single_press).execute();
            id($sub_on_single_press).execute();

      # definition for double press
    - timing:
        - ON for at most $sub_hold_time
        - OFF for at most $sub_double_press_max_gap
        - ON for at least 1ms
      then:
        - lambda: |-
            id(button_double_press).publish_state(true);
            // toggle if button is configured to toggle on double press
            if (id(select_button).state == "Toggle on Double Press") {
              id(ui_switch).toggle(); }
            id(script_hass_toggle_double_press).execute();
            id($sub_on_double_press).execute();

      # definition for holding
    - timing:
        - ON for at least $sub_hold_time
      then:
        - lambda: |-
            id(button_hold).publish_state(true);
            // toggle if button is configured to toggle on hold
            if (id(select_button).state == "Toggle on Hold") {
              id(ui_switch).toggle(); }
            id(script_hass_toggle_hold).execute();
            id($sub_on_hold).execute();

      # definition for release without hold
    - timing:
        - ON for at most $sub_hold_time
      then:
        - lambda: |-
            id(button_release_without_hold).publish_state(true);
            // toggle if button is configured to toggle on release without hold
            if (id(select_button).state == "Toggle on Release Without Hold") {
              id(ui_switch).toggle(); }
            id(script_hass_toggle_release_without_hold).execute();
            id($sub_on_release_without_hold).execute();

      # definition for 30s hold to clear credentials
    - timing:
        - ON for at least 30s
      then:
        - script.execute: $sub_wifi_reset_script

  - platform: template
    name: Single Press
    id: button_single_press
    on_press:
      - delay: $sub_button_sensor_duration
      - binary_sensor.template.publish:
          id: button_single_press
          state: OFF

  - platform: template
    name: Double Press
    id: button_double_press
    on_press:
      - delay: $sub_button_sensor_duration
      - binary_sensor.template.publish:
          id: button_double_press
          state: OFF

  - platform: template
    name: Hold
    id: button_hold
    on_press:
      - wait_until:
          binary_sensor.is_off: main_button
      - binary_sensor.template.publish:
          id: button_hold
          state: OFF

  - platform: template
    name: Release Without Hold
    id: button_release_without_hold
    on_press:
      - delay: $sub_button_sensor_duration
      - binary_sensor.template.publish:
          id: button_release_without_hold
          state: OFF

  - platform: template
    name: 4MiB
    id: sensor_4m
    disabled_by_default: $disable_entities


# https://esphome.io/components/switch/index.html
switch:
  - platform: gpio
    id: relay
    pin: GPIO15
    forced_hash: 3551080420
    forced_addr: 0
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_OFF

    # https://esphome.io/components/switch/template.html
  - platform: template
    name: $friendly_name
    id: ui_switch
    optimistic: true
    forced_hash: 4098969537
    forced_addr: 2
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_OFF

    on_turn_on:
      then:
        - lambda: |-
            // Waiting for select entity to have a state keeps the relay from toggling during boot.
            // Probably not needed after template switch priority was lowered, but keeping the check
            // in case they do the same for template selects later.
            if ( id(select_relay).has_state() && ( id(select_relay).state != "Always Off" ) ) {
              id(relay).turn_on(); }
        - script.execute: copy_vals
        - script.execute: script_save_changes
        - script.execute: $sub_on_turn_on

    on_turn_off:
      then:
        - lambda: |-
            // Waiting for select entity to have a state keeps the relay from toggling during boot.
            // Probably not needed after template switch priority was lowered, but keeping the check
            // in case they do the same for template selects later.
            if ( id(select_relay).has_state() && ( id(select_relay).state != "Always On" ) ) {
              id(relay).turn_off(); }
        - script.execute: copy_vals
        - script.execute: script_save_changes
        - script.execute: $sub_on_turn_off

  - platform: template
    id: switch_no_hass
    name: No HASS
    optimistic: true
    entity_category: config
    disabled_by_default: $disable_entities
    icon: mdi:toggle-switch-off-outline
    forced_hash: 1672474889
    forced_addr: 4
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_ON

    on_turn_on:
      - lambda: |-
          id(kauf_api)->set_reboot_timeout(0);  // 0 disables auto rebooting and also new status led blinking.  doesn't stop current status led blinking
          id(kauf_api)->status_clear_warning(); // stops current status led blinking, timeout 0 keeps it from restarting
      - script.execute: script_save_changes

    on_turn_off:
      - lambda: id(kauf_api)->set_reboot_timeout(900000);
      - script.execute: script_save_changes


# PWM outputs for each LED channel
# https://esphome.io/components/output/esp8266_pwm.html
output:

    # small light pwm
  - platform: esp8266_pwm
    pin: GPIO0
    frequency: 250 Hz
    id: pwm1_red
    inverted: true
  - platform: esp8266_pwm
    pin: GPIO12
    frequency: 250 Hz
    id: pwm1_green
    inverted: true
  - platform: esp8266_pwm
    pin: GPIO2
    frequency: 250 Hz
    id: pwm1_blue
    inverted: true

    # big light pwm
  - platform: esp8266_pwm
    pin: GPIO14
    frequency: 250 Hz
    id: pwm2_red
  - platform: esp8266_pwm
    pin: GPIO5
    frequency: 250 Hz
    id: pwm2_green
    max_power: .4
  - platform: esp8266_pwm
    pin: GPIO4
    frequency: 250 Hz
    id: pwm2_blue
    max_power: .35

    # Bit bucket output to connect configuration lights to.
    # https://esphome.io/components/output/template.html
  - platform: template
    id: bit_bucket
    type: float
    write_action:
      - script.execute: script_do_nothing


# https://esphome.io/components/light/index.html
# https://esphome.io/components/light/rgb.html
light:

  - platform: rgb
    name: Small Light
    id: small_light
    red: pwm1_red
    green: pwm1_green
    blue: pwm1_blue
    default_transition_length: $sub_transition_length
    forced_hash: 3940173824
    forced_addr: 10
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_ON

  - platform: rgb
    name: Small Off Value
    id: small_light_off
    red: bit_bucket
    green: bit_bucket
    blue: bit_bucket
    entity_category: config
    default_transition_length: 0s
    forced_hash: 1452166609
    forced_addr: 22
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_ON
    effects:
      - lambda:
          name: Disabled
          update_interval: never
          lambda: return;
    on_state:
      then:
        - script.execute: copy_vals
    initial_state:
      state: on
      color_mode: rgb
      red: 100%
      green: 0%
      blue: 0%
      brightness: 75%

  - platform: rgb
    name: Small On Value
    id: small_light_on
    red: bit_bucket
    green: bit_bucket
    blue: bit_bucket
    entity_category: config
    default_transition_length: 0s
    forced_hash: 1530533365
    forced_addr: 34
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_ON
    effects:
      - lambda:
          name: Disabled
          update_interval: never
          lambda: return;
    on_state:
      then:
        - script.execute: copy_vals
    initial_state:
      state: on
      color_mode: rgb
      red: 0%
      green: 100%
      blue: 0%
      brightness: 100%

  - platform: rgb
    name: Big Light
    id: big_light
    red: pwm2_red
    green: pwm2_green
    blue: pwm2_blue
    default_transition_length: $sub_transition_length
    forced_hash: 3403140939
    forced_addr: 46
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_ON

  - platform: rgb
    name: Big Off Value
    id: big_light_off
    red: bit_bucket
    green: bit_bucket
    blue: bit_bucket
    entity_category: config
    default_transition_length: 0s
    forced_hash: 730390778
    forced_addr: 58
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_ON
    effects:
      - lambda:
          name: Disabled
          update_interval: never
          lambda: return;
    on_state:
      then:
        - script.execute: copy_vals
    initial_state:
      state: on
      color_mode: rgb
      red: 0%
      green: 100%
      blue: 100%
      brightness: 25%

  - platform: rgb
    name: Big On Value
    id: big_light_on
    red: bit_bucket
    green: bit_bucket
    blue: bit_bucket
    entity_category: config
    default_transition_length: 0s
    forced_hash: 1638474020
    forced_addr: 70
    global_addr: global_forced_addr
    restore_mode: RESTORE_DEFAULT_ON
    effects:
      - lambda:
          name: Disabled
          update_interval: never
          lambda: return;
    on_state:
      then:
        - script.execute: copy_vals
    initial_state:
      state: on
      color_mode: rgb
      red: 0%
      green: 100%
      blue: 100%
      brightness: 90%


# https://esphome.io/components/select/index.html
# https://esphome.io/components/select/template.html
select:
  - platform: template
    name: Relay Config
    id: select_relay
    optimistic: true
    options:
      - Switched
      - Always On
      - Always Off
    initial_option: Switched
    restore_value: true
    entity_category: config
    icon: mdi:progress-question
    forced_hash: 3803457832
    forced_addr: 8
    global_addr: global_forced_addr

    on_value:
      then:
        - lambda: |-
            if      ( x == "Always On"  )   { id(relay).turn_on();  }
            else if ( x == "Always Off" )   { id(relay).turn_off(); }
            else if ( id(ui_switch).state ) { id(relay).turn_on();  }
            else      /* ui_switch off */   { id(relay).turn_off(); }
        - script.execute: script_save_changes

  - platform: template
    name: Button Config
    id: select_button
    optimistic: true
    options:
      - Toggle on Press
      - Disabled
      - Toggle on Release
      - Toggle on Single Press
      - Toggle on Double Press
      - Toggle on Hold
      - Toggle on Release Without Hold
    initial_option: Toggle on Press
    restore_value: true
    entity_category: config
    icon: mdi:toggle-switch-off-outline
    forced_hash: 1841528035
    forced_addr: 6
    global_addr: global_forced_addr
    on_value:
      - script.execute: script_save_changes


# https://esphome.io/guides/automations.html#script-component
script:

  - id: blink_status_led
    mode: queued
    then:

      # allows the blinking to be blocked if desired by overwriting script substitution
      - script.execute: $sub_blink_check

      # set LED red for ? ms then off for ? ms, then repeat
      - lambda: |-
          auto call = id(small_light).turn_on();
          call.set_brightness(1.0f);
          call.set_transition_length(0);
          call.set_rgb(1.0f, 0.0f, 0.0f);
          call.perform();
      - delay: 350ms
      - lambda: |-
          auto call = id(small_light).turn_off();
          call.set_transition_length(0);
          call.perform();
      - delay: 1150ms
      - if:
          condition:
            - lambda: return ( ( (App.get_app_state() & STATUS_LED_ERROR) != 0u) || ((App.get_app_state() & STATUS_LED_WARNING) != 0u) );
          then:
            - script.execute: blink_status_led # repeat as long as api not connected
          else:
            - script.execute: copy_vals        # restore set colors if api is connected

    # blink LED forever.  Used when button is held to re-enable AP.  Stops blinking because plug restarts.
  - id: blink_led
    mode: queued
    then:
      - light.toggle: small_light
      - delay: 333ms
      - script.execute: blink_led

  - id: script_do_nothing
    then:
      - lambda: return;

  - id: script_save_changes
    mode: restart
    then:
      - delay: 3s
      - lambda: global_preferences->sync();

  - id: script_wifi_reset
    mode: single
    then:
      - logger.log: "------------------->>>>>>>>>>>>>>>>>   HELD BUTTON 30 SECONDS, FORCING AP"

      # overwrite software defined credentials to force ap to turn on.
      - lambda: wifi::global_wifi_component->save_wifi_sta("initial_ap","asdfasdfasdfasdf");

      # blink LED for 10s then restart to get captive portal to turn on.
      - script.execute: blink_led
      - delay: 10s
      - button.press: restart_button

  # script to copy values from config lights to real lights per switch state
  - id: copy_vals
    mode: restart
    then:
      - lambda: |-
          // (small) switch is on, copy on values
          if ( ( id(ui_switch).state                                                              && (strcmp("$hass_entity_control_small_light","no.ne") == 0 ) && (small_light_on->get_effect_name() != "Disabled")) ||
               ((id(hass_small_light_state).state == "$hass_entity_control_small_light_on_state") && (strcmp("$hass_entity_control_small_light","no.ne") != 0 ) && (small_light_on->get_effect_name() != "Disabled"))  ) {
            auto call = id(small_light).make_call();
            call.set_state(small_light_on->current_values.is_on());
            call.set_brightness(small_light_on->current_values.get_brightness());
            call.set_rgb(small_light_on->current_values.get_red(),
                         small_light_on->current_values.get_green(),
                         small_light_on->current_values.get_blue());
            call.perform();
          }

          // (small) switch is off, copy off values
          else if ( (!id(ui_switch).state                                                               && (strcmp("$hass_entity_control_small_light","no.ne") == 0 ) && (small_light_on->get_effect_name() != "Disabled")) ||
                    ((id(hass_small_light_state).state == "$hass_entity_control_small_light_off_state") && (strcmp("$hass_entity_control_small_light","no.ne") != 0 ) && (small_light_on->get_effect_name() != "Disabled"))  ) {
            auto call = id(small_light).make_call();
            call.set_state(small_light_off->current_values.is_on());
            call.set_brightness(small_light_off->current_values.get_brightness());
            call.set_rgb(small_light_off->current_values.get_red(),
                         small_light_off->current_values.get_green(),
                         small_light_off->current_values.get_blue());
            call.perform();
          }

          // (big) switch is on, copy on values
          if ( ( id(ui_switch).state                                                          && (strcmp("$hass_entity_control_big_light","no.ne") == 0 ) && (big_light_on->get_effect_name() != "Disabled")) ||
               ((id(hass_big_light_state).state == "$hass_entity_control_big_light_on_state") && (strcmp("$hass_entity_control_big_light","no.ne") != 0 ) && (big_light_on->get_effect_name() != "Disabled"))  ) {
            auto call = id(big_light).make_call();
            call.set_state(big_light_on->current_values.is_on());
            call.set_brightness(big_light_on->current_values.get_brightness());
            call.set_rgb(big_light_on->current_values.get_red(),
                         big_light_on->current_values.get_green(),
                         big_light_on->current_values.get_blue());
            call.perform();
          }

          else if ( (!id(ui_switch).state                                                          && (strcmp("$hass_entity_control_big_light","no.ne") == 0 ) && (big_light_on->get_effect_name() != "Disabled")) ||
                    ((id(hass_big_light_state).state == "$hass_entity_control_big_light_on_state") && (strcmp("$hass_entity_control_big_light","no.ne") != 0 ) && (big_light_on->get_effect_name() != "Disabled"))  ) {
            auto call = id(big_light).make_call();
            call.set_state(big_light_off->current_values.is_on());
            call.set_brightness(big_light_off->current_values.get_brightness());
            call.set_rgb(big_light_off->current_values.get_red(),
                         big_light_off->current_values.get_green(),
                         big_light_off->current_values.get_blue());
            call.perform();
          }

  - id: script_hass_toggle_single_press
    then:
      if:
        condition:    # toggle if single press hass entity is set
          lambda: return (strcmp("$hass_entity_single_press_toggle","no.ne") != 0 );
        then:
          homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $hass_entity_single_press_toggle

  - id: script_hass_toggle_double_press
    then:
      if:
        condition:    # toggle if double press hass entity is set
          lambda: return (strcmp("$hass_entity_double_press_toggle","no.ne") != 0 );
        then:
          homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $hass_entity_double_press_toggle

  - id: script_hass_toggle_hold
    then:
      if:
        condition:    # toggle if hold hass entity is set
          lambda: return (strcmp("$hass_entity_hold_toggle","no.ne") != 0 );
        then:
          homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $hass_entity_hold_toggle

  - id: script_hass_toggle_release_without_hold
    then:
      if:
        condition:    # toggle if release without hold hass entity is set
          lambda: return (strcmp("$hass_entity_release_without_hold_toggle","no.ne") != 0 );
        then:
          homeassistant.service:
            service: homeassistant.toggle
            data:
              entity_id: $hass_entity_release_without_hold_toggle


# https://esphome.io/components/button/index.html
button:

    # https://esphome.io/components/button/restart.html
  - platform: restart
    id: restart_button
    name: Restart Firmware
    entity_category: diagnostic
    disabled_by_default: $disable_entities

    # https://esphome.io/components/button/template.html
  - platform: template
    name: Restore Lights
    entity_category: diagnostic
    disabled_by_default: $disable_entities
    on_press:
      - script.execute: copy_vals


# Send IP Address to HA
# https://esphome.io/components/text_sensor/wifi_info.html
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      entity_category: diagnostic
      disabled_by_default: $disable_entities
  - platform: homeassistant
    id: hass_small_light_state
    entity_id: $hass_entity_control_small_light
    on_value:
      - delay: 1ms
      - script.execute: copy_vals
  - platform: homeassistant
    id: hass_big_light_state
    entity_id: $hass_entity_control_big_light
    on_value:
      - delay: 1ms
      - script.execute: copy_vals


# https://esphome.io/components/sensor/index.html
sensor:

    # https://esphome.io/components/sensor/template.html
  - platform: template
    name: Button Press Duration
    id: sensor_press_duration
    entity_category: diagnostic
    disabled_by_default: $disable_entities
    unit_of_measurement: ms
    icon: mdi:timer-outline

    # https://esphome.io/components/sensor/uptime.html
  - platform: uptime
    name: Uptime
    update_interval: 60s
    entity_category: diagnostic
    disabled_by_default: $disable_entities


# emulate status_led
# https://esphome.io/guides/automations.html#interval-component
interval:
  - interval: 5s
    then:
      if:
        condition:
          - lambda: return ( ( (App.get_app_state() & STATUS_LED_ERROR) != 0u) || ((App.get_app_state() & STATUS_LED_WARNING) != 0u) );
        then:
          - if:
              condition:
                not:
                  - script.is_running: blink_status_led
              then:
                - script.execute: blink_status_led


# Current reserved flash memory:
#  00- 01:   Relay Switch
#  02- 03:   UI Switch
#  04- 05:   No HASS Switch
#  06- 07:   Button Config Select
#  08- 09:   Relay Config Select
#  10- 21:   Small Light
#  22- 33:   Small Off Value Light
#  34- 45:   Small On Value Light
#  46- 57:   Big Light
#  58- 69:   Big Off Value Light
#  70- 81:   Big On Value Light
#  82-107:   Wi-Fi Credentials
